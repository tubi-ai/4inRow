import java.awt.*;
import java.awt.event.*;
import javax.swing.*;


public class ForInRow extends JPanel {

    public static void main(String[] args) {
        JFrame window = new JFrame("Four in a Row Game Assignment");
        ForInRow content = new ForInRow();
        window.setContentPane(content);
        window.pack();
        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        window.setLocation( (screensize.width - window.getWidth())/2,
                (screensize.height - window.getHeight())/2 );
        window.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        window.setResizable(false);
        window.setVisible(true);
    }
    private JButton newGameButton;  // Button for starting a new game.

    private JButton resignButton;   // Button that a player can use to end the
    //   game by resigning.

    private JLabel message;  // Label for displaying messages to the user.

    public ForInRow() {

        setLayout(null);  // I will do the layout myself.

        setPreferredSize( new Dimension(500,420) );

        setBackground(new Color(0,100,0));  // Dark green background.

        /* Create the components and add them to the panel. */

        Board board = new Board();
        add(board);
        add(newGameButton);
        add(resignButton);
        add(message);


        board.setBounds(20,20,314,314); // Note:  size MUST be 314-by-314 !
        newGameButton.setBounds(370, 120, 120, 30);
        resignButton.setBounds(370, 200, 120, 30);
        message.setBounds(20, 370, 460, 30);
    }

    class Board extends JPanel implements  MouseListener {

        int[][] board;   // The data for the board is kept here.  The values
        //   in this array are chosen from the following constants.

        static final int EMPTY = 0,       // Represents an empty square.
                WHITE = 1,       // A white piece.
                BLACK = 2;       // A black piece.

        boolean gameInProgress; // Is a game currently in progress?

        int currentPlayer;      // Whose turn is it now?  The possible values
        //    are WHITE and BLACK.  (This is valid only while
        //    a game is in progress.)

        int win_r1, win_c1, win_r2, win_c2; // When a player wins by getting five or more

        public Board() {
            setBackground(Color.LIGHT_GRAY);
            addMouseListener(this);
            resignButton = new JButton("Resign");
            resignButton.addActionListener( e -> doResign() );
            newGameButton = new JButton("New Game");
            newGameButton.addActionListener( e -> doNewGame());
            message = new JLabel("",JLabel.CENTER);
            message.setFont(new  Font("Serif", Font.BOLD, 20));
            message.setForeground(Color.GREEN);
            board = new int[13][13];
            doNewGame();
        }
        void doNewGame() {
            if (gameInProgress == true) {
                message.setText("Finish the current game first!");
                return;
            }
            for (int row = 0; row < 13; row++)       // Fill the board with EMPTYs
                for (int col = 0; col < 13; col++)
                    board[row][col] = EMPTY;
            currentPlayer = BLACK;   // BLACK moves first.
            message.setText("BLACK:  Make your move.");
            gameInProgress = true;
            newGameButton.setEnabled(false);
            resignButton.setEnabled(true);
            win_r1 = -1;  // This value indicates that no red line is to be drawn.
            repaint();
        }
        void doResign() {
            if (gameInProgress == false) {
                // This should not be possible.
                message.setText("There is no game in progress!");
                return;
            }
            if (currentPlayer == WHITE)
                message.setText("WHITE resigns.  BLACK wins.");
            else
                message.setText("BLACK resigns.  WHITE wins.");
            newGameButton.setEnabled(true);
            resignButton.setEnabled(false);
            gameInProgress = false;
        }

        void gameOver(String str) {
            message.setText(str);
            newGameButton.setEnabled(true);
            resignButton.setEnabled(false);
            gameInProgress = false;
        }
        void doClickSquare(int row, int col) {

            /* Check that the user clicked an empty square.  If not, show an
                error message and exit. */

            if ( board[row][col] != EMPTY ) {
                if (currentPlayer == BLACK)
                    message.setText("BLACK:  Please click an empty square.");
                else
                    message.setText("WHITE:  Please click an empty square.");
                return;
            }

            /* Make the move.  Check if the board is full or if the move
               is a winning move.  If so, the game ends.  If not, then it's
               the other user's turn. */

            board[row][col] = currentPlayer;  // Make the move.
            repaint();

            if (winner(row,col)) {  // First, check for a winner.
                if (currentPlayer == WHITE)
                    gameOver("WHITE wins the game!");
                else
                    gameOver("BLACK wins the game!");
                return;
            }

            boolean emptySpace = false;     // Check if the board is full.
            for (int i = 0; i < 13; i++)
                for (int j = 0; j < 13; j++)
                    if (board[i][j] == EMPTY)
                        emptySpace = true;
            if (emptySpace == false) {
                gameOver("The game ends in a draw.");
                return;
            }

            /* Continue the game.  It's the other player's turn. */

            if (currentPlayer == BLACK) {
                currentPlayer = WHITE;
                message.setText("WHITE:  Make your move.");
            }
            else {
                currentPlayer = BLACK;
                message.setText("BLACK:  Make your move.");
            }

        }  // end doClickSquare()


        private boolean winner(int row, int col) {

            if (count( board[row][col], row, col, 1, 0 ) >= 4)
                return true;
            if (count( board[row][col], row, col, 0, 1 ) >= 4)
                return true;
            if (count( board[row][col], row, col, 1, -1 ) >= 4)
                return true;
            if (count( board[row][col], row, col, 1, 1 ) >= 4)
                return true;

            /* When we get to this point, we know that the game is not
               won.  The value of win_r1, which was changed in the count()
               method, has to be reset to -1, to avoid drawing a red line
               on the board. */

            win_r1 = -1;
            return false;

        }  // end winner()

        private int count(int player, int row, int col, int dirX, int dirY) {

            int ct = 1;  // Number of pieces in a row belonging to the player.

            int r, c;    // A row and column to be examined

            r = row + dirX;  // Look at square in specified direction.
            c = col + dirY;
            while ( r >= 0 && r < 13 && c >= 0 && c < 13 && board[r][c] == player ) {
                // Square is on the board and contains one of the players's pieces.
                ct++;
                r += dirX;  // Go on to next square in this direction.
                c += dirY;
            }

            win_r1 = r - dirX;  // The next-to-last square looked at.
            win_c1 = c - dirY;  //    (The LAST one looked at was off the board or
            //    did not contain one of the player's pieces.

            r = row - dirX;  // Look in the opposite direction.
            c = col - dirY;
            while ( r >= 0 && r < 13 && c >= 0 && c < 13 && board[r][c] == player ) {
                // Square is on the board and contains one of the players's pieces.
                ct++;
                r -= dirX;   // Go on to next square in this direction.
                c -= dirY;
            }

            win_r2 = r + dirX;
            win_c2 = c + dirY;

            // At this point, (win_r1,win_c1) and (win_r2,win_c2) mark the endpoints
            // of the line of pieces belonging to the player.

            return ct;

        }  // end count()

        public void paintComponent(Graphics g) {

            super.paintComponent(g); // Fill with background color, lightGray
            ((Graphics2D)g).setStroke(new BasicStroke(2));

            /* Draw a two-pixel black border around the edges of the canvas,
               and draw grid lines in darkGray.  */

            g.setColor(Color.BLACK);
            for (int i = 0; i <= 13; i++) {
                g.drawLine(1 + 24*i, 0, 1 + 24*i, 314);
                g.drawLine(0, 1 + 24*i, 314, 1 + 24*i);
            }

            /* Draw the pieces that are on the board, with anti-aliasing turned on. */

            ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);

            for (int row = 0; row < 13; row++)
                for (int col = 0; col < 13; col++)
                    if (board[row][col] != EMPTY)
                        drawPiece(g, board[row][col], row, col);

            /* If the game has been won, then win_r1 >= 0.  Draw a line to mark
               the five (or more) winning pieces. */

            if (win_r1 >= 0)
                drawWinLine(g);

        }  // end paintComponent()

        private void drawPiece(Graphics g, int piece, int row, int col) {
            if (piece == WHITE)
                g.setColor(Color.WHITE);
            else
                g.setColor(Color.BLACK);
            g.fillOval(4 + 24*col, 4 + 24*row, 19, 19);
        }

        private void drawWinLine(Graphics g) {
            g.setColor(Color.RED);
            ((Graphics2D)g).setStroke(new BasicStroke(4));
            g.drawLine( 13 + 24*win_c1, 13 + 24*win_r1, 13 + 24*win_c2, 13 + 24*win_r2 );
        }

        public void mousePressed(MouseEvent evt) {
            if (gameInProgress == false)
                message.setText("Click \"New Game\" to start a new game.");
            else {
                int col = (evt.getX() - 2) / 24;
                int row = (evt.getY() - 2) / 24;
                if (col >= 0 && col < 24 && row >= 0 && row < 24)
                    doClickSquare(row,col);
            }
        }

        public void mouseReleased(MouseEvent evt) { }
        public void mouseClicked(MouseEvent evt) { }
        public void mouseEntered(MouseEvent evt) { }
        public void mouseExited(MouseEvent evt) { }

    }  // end nested class Board


} // end class ForInRow
